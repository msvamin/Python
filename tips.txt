http://www.programiz.com/python-programming/
--------------------------------------------

Docstring
-----------
def func1(num):
	"""Function explanation"""
	...

print func1.__dic__

Multiple assignments
---------------------
a, b, c = 5, 4.1, "AA"


DataTypes
-----------
type(a)
list:	a = [1,2.2,'uuh']	,	a[2]
tuple:	a = (1,2,'dsd')		, 	a[1]
set:	a = {2,2,3,3,3,5}		=> 	a={2,3,5}
dict:	a = {'a':1, 'h':2}

a = 10.3	,	b = int(a)	=>	b = 10

isinstance(a, int)

id(a)		the location in RAM

0b or 0B :Binary
0o or 0O :Octal
0x or 0X :Hexadecimal
 j : imaginary (2+3j)

>>> from decimal import Decimal as D
>>> D('1.1') + D('2.2')
Decimal('3.3')
>>> D('1.2') * D('2.50')
Decimal('3.000')


Lists
--------
my_list[2:5] or [-2] or [:] or [4:]
[1,3]+[4,4] => [1,3,4,4]
["r"]*3 => ["r","r","r"]
my_list.insert(1,3)
del my_list[2]
my_list.remove(1)
my_list.pop()
my_list.clear()

Tuples
--------
They are like lists, but we cannot change the values.
Tuples are faster.
Tuples can be used as keys in dict, but lists not.

Sets
-------
my_set = {1,2,3}
my_set.add(2)
my_set.update([2,3,4])
my_set.remove(2)	if 2 doesnot exist gives error
my_set.discard(2)	if 2 doesnot exist no error
A.union(B)
A.intersection(B)
A.difference(B)
frozensets are sets that when assigned cannot be changed again
A= frozenset([1,2,3])

Dicts
---------
squares = {x: x*x for x in range(6)}

Files
--------
safer way to open a file
try:
   f = open("test.txt",encoding = 'utf-8')
   # perform file operations
finally:
   f.close()
or
with open("test.txt",encoding = 'utf-8') as f:
   # perform file operations

Output
---------
print(1,2,3,sep='*',end='&')	=>	1*2*3&
>>> x = 5; y = 10
>>> print('The value of x is {} and y is {}'.format(x,y))
The value of x is 5 and y is 10

>>> print('I love {0} and {1}'.format('bread','butter'))
I love bread and butter
>>> print('I love {1} and {0}'.format('bread','butter'))
I love butter and bread

>>> print('Hello {name}, {greeting}'.format(greeting='Goodmorning',name='John'))
Hello John, Goodmorning

>>> x = 12.3456789
>>> print('The value of x is %3.2f' %x)
The value of x is 12.35

Input
--------
>>> num = input('Enter a number: ')
Enter a number: 10

import
--------
sys.path		searching pathes


operators
-----------
and	or	not
Bitwise:	&	|	~	^	>>	<<

Loops
---------
range(start,stop,step size)
for ...:
	...
else:			occurs if no break
	...

while ...:
	...
else:	
	...


Lambda functions
-------------------
lambda arguments: expression
double = lambda x: x * 2
print(double(5))

my_list = [1, 5, 4, 6, 8, 11, 3, 12]

new_list = list(filter(lambda x: (x%2 == 0) , my_list))
print(new_list)

new_list = list(map(lambda x: x * 2 , my_list))
print(new_list)


Modules
-----------
import ... as ...
from ... import ...
dir(modulename)


Exception Handling
---------------------
try:
	....
except ValueError:
	...
except (TypeError, ZeroDivisionError):
	...
except:
	...

raise ValueError	raise an error

try:
	...
finally:
	...	no matter what it will try this

user defined exceptions:
class ValueTooSmallError(Error):
   """Raised when the input value is too small"""
   pass

Classes and inheritance
--------------------------
class Polygon:
    def __init__(self, no_of_sides):
        self.n = no_of_sides
        self.sides = [0 for i in range(no_of_sides)]

    def inputSides(self):
	........

Inheritance
class Triangle(Polygon):
    def __init__(self):
        Polygon.__init__(self,3)	or		super().__init(3)

    def findArea(self):
	........

isinstance
issubclass

Multiple inheritance:

class Base1:
    pass

class Base2:
    pass

class MultiDerived(Base1, Base2):
    pass


Special functions
------------------------
__init__
__str__
class Point:
    # previous definitions...
    
    def __str__(self):
        return "({0},{1})".format(self.x,self.y)

__add__
class Point:
    # previous definitions...
    
    def __add__(self,other):
        x = self.x + other.x
        y = self.y + other.y
        return Point(x,y)

Iterators
------------
>>> my_iter = iter(my_list)
>>> my_iter
<list_iterator object at 0x00000000031AD9B0>

>>> # iterate through it using next() 
>>> next(my_iter)
4
>>> next(my_iter)
7

>>> # next(obj) is same as obj.__next__()
>>> my_iter.__next__()
0
>>> my_iter.__next__()
3

>>> next(my_iter)
Traceback (most recent call last):
...
StopIteration

for implementation
# create an iterator object from that iterable
iter_obj = iter(iterable)

# infinite loop
while True:
    try:
        # get the next item
        element = next(iter_obj)
        # do something with element
    except StopIteration:
        # if StopIteration is raised, break from loop
        break


Generator function
-------------------
yield
return statement terminates a function entirely
yield statement pauses the function saving all its states and later continues from there on successive calls


Closures
------------
data attached to the code	
-We must have a nested function (function inside a function).
-The nested function must refer to a value defined in the enclosing function.
-The enclosing function must return the nested function.

def make_multiplier_of(n):
    def multiplier(x):
        return x * n
    return multiplier
>>> times3 = make_multiplier_of(3)
>>> times5 = make_multiplier_of(5)

>>> times3(9)
27
>>> times5(3)
15


Decorators
-------------
def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner

def ordinary():
    print("I am ordinary")


def smart_divide(func):
    def inner(a,b):
        print("I am going to divide",a,"and",b)
        if b == 0:
            print("Whoops! cannot divide")
            return

        return func(a,b)
    return inner

@smart_divide
def divide(a,b):
    return a/b

Property
---------------
class Celsius:
    def __init__(self, temperature = 0):
        self._temperature = temperature

    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32

    @property
    def temperature(self):
        print("Getting value")
        return self._temperature

    @temperature.setter
    def temperature(self, value):
        if value < -273:
            raise ValueError("Temperature below -273 is not possible")
        print("Setting value")
        self._temperature = value

	